#!/usr/bin/env bash
set -euo pipefail

## Defaults

NIX_BUILD=nix-build
SNACK_NIX=snack.nix
COMMAND=

## Functions

log_error() {
  echo "ERROR: $*" >&2
}

show_usage() {
  cat <<USAGE
Usage: snack [options] <command>

Snack is a Haskell build tool

Options:
  -f | --snack-nix <PATH>: sets the path ot the "snack.nix" file. Default: "./snack.nix"
  -h | --help: Shows this help

Commands:
  run: builds and executes
  build: builds
  ghci: builds and loads in ghci
USAGE
}

## Main

while [[ $# -gt 0 ]]; do
  key="$1"

  case $key in
    -f | --snack-nix)
      SNACK_NIX="$2"
      shift
      shift
      ;;
    -h | --help)
      show_usage
      exit 0
      ;;
    run | build | ghci)
      COMMAND="$1"
      shift # past argument
      ;;
    *) # unknown option
      echo "unknown option: $1"
      exit 1
      ;;
  esac
done

if [[ -z "$COMMAND" ]]; then
  log_error "missing <command>\n"
  show_usage
  exit 1
fi

case $COMMAND in
  build)
    "$NIX_BUILD" --no-out-link -A build "$SNACK_NIX"
    ;;
  ghci)
    res=$("$NIX_BUILD" --no-out-link -A ghci "$SNACK_NIX")
    "$res/bin/ghci"
    ;;
  run)
    res=$("$NIX_BUILD" --no-out-link -A build "$SNACK_NIX")
    "$res/out"
    ;;
esac
