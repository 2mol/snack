#!/usr/bin/env bash
set -euo pipefail

## Defaults

NIXPKGS=
NIX_BUILD=nix-build
SNACK_NIX="./snack.nix"
WRAPPER_NIX=
COMMAND=

## Functions

log_error() {
  echo "ERROR: $*" >&2
}

show_usage() {
  cat <<USAGE
Usage: snack [options] <command>

Snack is a Haskell build tool

Options:
  -f | --snack-nix <PATH>: sets the path ot the "snack.nix" file. Default: "./snack.nix"
  -w | --wrapper-nix <PATH>: sets the path ot the nix wrapper file. This file
        should take at least one argument, "snackNix", which is the path to the
        "snack.nix".
  -n | --nixpkgs <PATH>: use the path to import nixpkgs. The expression should
        take no arguments and evaluate to a set containing at least
        "snack-lib".
  -h | --help: Shows this help

Commands:
  run: builds and executes
  build: builds
  ghci: builds and loads in ghci
USAGE
}

## Main

while [[ $# -gt 0 ]]; do
  key="$1"

  case $key in
    -f | --snack-nix)
      SNACK_NIX="$2"
      shift
      shift
      ;;
    -w | --wrapper-nix)
      WRAPPER_NIX="$2"
      shift
      shift
      ;;
    -n | --nixpkgs)
      NIXPKGS="$2"
      shift
      shift
      ;;
    -h | --help)
      show_usage
      exit 0
      ;;
    run | build | ghci)
      COMMAND="$1"
      shift # past argument
      ;;
    *) # unknown option
      echo "unknown option: $1"
      exit 1
      ;;
  esac
done

if [[ -z "$COMMAND" ]]; then
  log_error "missing <command>\n"
  show_usage
  exit 1
fi

if [[ -z "$WRAPPER_NIX" ]]; then
  log_error "missing <wrapper>\n"
  show_usage
  exit 1
fi

call_snack() {
  "$NIX_BUILD" \
    --no-out-link \
    -A $1 \
    "$WRAPPER_NIX" \
    --arg snackNix "$SNACK_NIX" \
    --arg nixpkgs "$NIXPKGS"
}

case $COMMAND in
  build)
    call_snack build
    ;;
  ghci)
    res=$(call_snack ghci)
    "$res"
    ;;
  run)
    res=$(call_snack build)
    "$res/out"
    ;;
esac
